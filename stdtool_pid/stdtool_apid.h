/**
  ******************************************************************************
  * @file    apid.h
  * @author  arthur
  * @version v2
  * @date    2018-5-18
  * @brief   none
  *
  *                      
  ******************************************************************************
  * @attention
  *
  *
  ******************************************************************************
  */

  
/*******************************************************************************
********************* Define to prevent recursive inclusion ********************
*******************************************************************************/

#ifndef ADVANCED_PID_H
#define ADVANCED_PID_H

/*******************************************************************************
************************************ Includes **********************************
*******************************************************************************/
typedef float               F32;

/*******************************************************************************
********************************* Exported macro *******************************
*******************************************************************************/

/*******************************************************************************
********************************* Exported types *******************************
*******************************************************************************/
/*PID controller struct def 
where for the param
KP is not time related
KI is time related, KI = _ki * sampletime(in second).
KD is time related, KD = _kd * sampletime(in second).
*/
typedef struct 
{
    F32  sp;                        //the set
    F32  pv;                        //the feedback
    F32  out;                       //the output
                                    //--- middle data ---
    F32  err;                       //err of this time = SP-PV
    F32  err_last;                  //the last err, recorded
    F32  part_p;                    //p part output, with limitation
    F32  part_i;                    //i part output
    F32  part_d;                    //d part output
                                    //--- parameter data ---
    F32  KP;                        //proportation gain
    F32  P_LIM_DN;                  //low limit
    F32  P_LIM_UP;                  //high limit
    
    F32  KI;
    F32  I_DEADZONE;                //dead zone for i control
    F32  I_FALLRATE;                //i ocontrol decaying gain value, range 0~1.00
    F32  I_LIM_DN;
    F32  I_LIM_UP;
    
    F32  KD;
    F32  D_LIM_DN;
    F32  D_LIM_UP;
    
    F32  TOTAL_LIM_DN;              //low limit for output
    F32  TOTAL_LIM_UP;              //high limit for output
    
} APID_STRU;

/*******************************************************************************
******************************* Exported constants *****************************
*******************************************************************************/


/*******************************************************************************
******************************* Exported variables *****************************
*******************************************************************************/


/*******************************************************************************
******************************* Exported functions *****************************
*******************************************************************************/
void Advanced_PID_Controller(APID_STRU * apid);

void Advanced_PID_Para_Reset(APID_STRU * apid);

#endif /* ADVANCED_PID_H */

/********************************* end of file ********************************/

